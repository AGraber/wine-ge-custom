From e13770344bef95b734a1000a0c70bc4d5fce540f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 17 Dec 2020 19:05:37 +0100
Subject: [PATCH] HACK: steam: winebus.sys: Check Steam overlay presence and
 drop reports when enabled.

---
 dlls/winebus.sys/bus_sdl.c  | 12 ++++++++++++
 dlls/winebus.sys/bus_udev.c | 12 ++++++++++++
 2 files changed, 24 insertions(+)

diff --git a/dlls/winebus.sys/bus_sdl.c b/dlls/winebus.sys/bus_sdl.c
index cc490c0ea77..a26da1340e2 100644
--- a/dlls/winebus.sys/bus_sdl.c
+++ b/dlls/winebus.sys/bus_sdl.c
@@ -70,6 +70,7 @@ static DWORD map_controllers = 0;
 static void *sdl_handle = NULL;
 static HANDLE deviceloop_handle;
 static UINT quit_event = -1;
+static HANDLE steam_overlay_event;
 
 #define XINPUT_HACK_ID_BIT 0x80000000
 
@@ -1166,8 +1167,13 @@ static void try_add_device(unsigned int index, BOOL xinput_hack)
 
 static void process_device_event(SDL_Event *event)
 {
+    BOOL overlay_enabled = FALSE;
+
     TRACE_(hid_report)("Received action %x\n", event->type);
 
+    if (WaitForSingleObject(steam_overlay_event, 0) == WAIT_OBJECT_0)
+        overlay_enabled = TRUE;
+
     if (event->type == SDL_JOYDEVICEADDED)
     {
         try_add_device(((SDL_JoyDeviceEvent*)event)->which, TRUE);
@@ -1182,6 +1188,8 @@ static void process_device_event(SDL_Event *event)
     {
         SDL_Event xinput_hack_event = *event;
 
+        if (overlay_enabled) return;
+
         set_report_from_event(event);
 
         ((SDL_JoyAxisEvent*)&xinput_hack_event)->which |= XINPUT_HACK_ID_BIT;
@@ -1191,6 +1199,8 @@ static void process_device_event(SDL_Event *event)
     {
         SDL_Event xinput_hack_event = *event;
 
+        if (overlay_enabled) return;
+
         set_mapped_report_from_event(event);
 
         ((SDL_JoyAxisEvent*)&xinput_hack_event)->which |= XINPUT_HACK_ID_BIT;
@@ -1299,6 +1309,7 @@ void sdl_driver_unload( void )
     WaitForSingleObject(deviceloop_handle, INFINITE);
     CloseHandle(deviceloop_handle);
     dlclose(sdl_handle);
+    CloseHandle(steam_overlay_event);
 }
 
 NTSTATUS sdl_driver_init(void)
@@ -1308,6 +1319,7 @@ NTSTATUS sdl_driver_init(void)
 
     HANDLE events[2];
     DWORD result;
+    steam_overlay_event = CreateEventA(NULL, TRUE, FALSE, "__wine_steamclient_GameOverlayActivated");
 
     if (sdl_handle == NULL)
     {
diff --git a/dlls/winebus.sys/bus_udev.c b/dlls/winebus.sys/bus_udev.c
index cc332c6f042..7af9128110a 100644
--- a/dlls/winebus.sys/bus_udev.c
+++ b/dlls/winebus.sys/bus_udev.c
@@ -102,6 +102,7 @@ static DWORD disable_hidraw = 0;
 static DWORD disable_input = 0;
 static HANDLE deviceloop_handle;
 static int deviceloop_control[2];
+static HANDLE steam_overlay_event;
 
 static const WCHAR hidraw_busidW[] = {'H','I','D','R','A','W',0};
 static const WCHAR lnxev_busidW[] = {'L','N','X','E','V',0};
@@ -1214,15 +1215,22 @@ static DWORD CALLBACK device_report_thread(void *args)
     {
         int size;
         BYTE report_buffer[1024];
+        BOOL overlay_enabled = FALSE;
 
         if (poll(plfds, 2, -1) <= 0) continue;
         if (plfds[1].revents)
             break;
+
+        if (WaitForSingleObject(steam_overlay_event, 0) == WAIT_OBJECT_0)
+            overlay_enabled = TRUE;
+
         size = read(plfds[0].fd, report_buffer, sizeof(report_buffer));
         if (size == -1)
             TRACE_(hid_report)("Read failed. Likely an unplugged device %d %s\n", errno, strerror(errno));
         else if (size == 0)
             TRACE_(hid_report)("Failed to read report\n");
+        else if (overlay_enabled)
+            TRACE_(hid_report)("Overlay is enabled, dropping report\n");
         else
         {
             if(private->quirks & QUIRK_DS4_BT)
@@ -2341,6 +2349,8 @@ void udev_driver_unload( void )
 #ifdef HAS_PROPER_INPUT_HEADER
     bus_enumerate_hid_devices(&lnxev_vtbl, device_unload, NULL);
 #endif
+
+    CloseHandle(steam_overlay_event);
 }
 
 NTSTATUS udev_driver_init(void)
@@ -2354,6 +2364,8 @@ NTSTATUS udev_driver_init(void)
     static const WCHAR input_disabledW[] = {'D','i','s','a','b','l','e','I','n','p','u','t',0};
     static const UNICODE_STRING input_disabled = {sizeof(input_disabledW) - sizeof(WCHAR), sizeof(input_disabledW), (WCHAR*)input_disabledW};
 
+    steam_overlay_event = CreateEventA(NULL, TRUE, FALSE, "__wine_steamclient_GameOverlayActivated");
+
     if (pipe(deviceloop_control) != 0)
     {
         ERR("Control pipe creation failed\n");
From 4b54b614e48d9463e71acf2da899ddd05978a29f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Sat, 9 Jan 2021 20:11:52 +0100
Subject: [PATCH] HACK: steam: dinput: Check Steam overlay presence and ignore
 updates when enabled.

---
 dlls/dinput/joystick_sdl.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/dlls/dinput/joystick_sdl.c b/dlls/dinput/joystick_sdl.c
index e6266084906..a1ca99ee310 100644
--- a/dlls/dinput/joystick_sdl.c
+++ b/dlls/dinput/joystick_sdl.c
@@ -160,6 +160,7 @@ static CRITICAL_SECTION_DEBUG sdldevs_lock_debug =
 static CRITICAL_SECTION sdldevs_lock = { &sdldevs_lock_debug, -1, 0, 0, 0, 0 };
 
 static struct SDLDev sdldevs[64];
+static HANDLE steam_overlay_event;
 
 /* logic from SDL2's SDL_ShouldIgnoreGameController */
 static BOOL is_in_sdl_blacklist(DWORD vid, DWORD pid)
@@ -224,6 +225,8 @@ static BOOL WINAPI sdldrv_init(INIT_ONCE *once, void *param, void **context)
     SDL_Init(SDL_INIT_JOYSTICK|SDL_INIT_HAPTIC);
     SDL_JoystickEventState(SDL_ENABLE);
 
+    steam_overlay_event = CreateEventA(NULL, TRUE, FALSE, "__wine_steamclient_GameOverlayActivated");
+
     return TRUE;
 }
 
@@ -890,6 +893,9 @@ static HRESULT poll_sdl_device_state(LPDIRECTINPUTDEVICE8A iface)
     struct device_state_item item;
     SDL_Joystick *js = This->sdldev->sdl_js;
 
+    if (WaitForSingleObject(steam_overlay_event, 0) == WAIT_OBJECT_0)
+        return DI_OK; /* steam overlay is enabled */
+
     SDL_JoystickUpdate();
 
     if(!SDL_JoystickGetAttached(js))
From 2117f849363107537dfc954451ed96237b5b3f9d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 14 Jan 2021 16:30:58 +0100
Subject: [PATCH] HACK: steam: winebus.sys: Pass SDL button up events through
 the overlay.

So that game internal state doesn't keep the button as pressed. Some
game request the Steam overlay to open whenever a button is pressed,
and keep requesting it until its state changes, which never happened
as we were dropping all the events.
---
 dlls/winebus.sys/bus_sdl.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/dlls/winebus.sys/bus_sdl.c b/dlls/winebus.sys/bus_sdl.c
index a26da1340e2..a80de1d6a08 100644
--- a/dlls/winebus.sys/bus_sdl.c
+++ b/dlls/winebus.sys/bus_sdl.c
@@ -1188,7 +1188,7 @@ static void process_device_event(SDL_Event *event)
     {
         SDL_Event xinput_hack_event = *event;
 
-        if (overlay_enabled) return;
+        if (overlay_enabled && event->type != SDL_JOYBUTTONUP) return;
 
         set_report_from_event(event);
 
@@ -1199,7 +1199,7 @@ static void process_device_event(SDL_Event *event)
     {
         SDL_Event xinput_hack_event = *event;
 
-        if (overlay_enabled) return;
+        if (overlay_enabled && event->type != SDL_CONTROLLERBUTTONUP) return;
 
         set_mapped_report_from_event(event);
 
